# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

# Home page
GET     /                           controllers.Application.index()

# Map static resources from the /public folder to the /assets URL path
GET     /assets/*file               controllers.Assets.at(path="/public", file)

#DeviceType
POST	/addDeviceType 			controllers.DeviceTypeController.addDeviceType()
GET		/getDeviceType/:deviceTypeName/json 			controllers.DeviceTypeController.getDeviceType(deviceTypeName: String, format: String="json")
GET		/getDeviceType/:deviceTypeName/csv 			controllers.DeviceTypeController.getDeviceType(deviceTypeName: String, format: String="csv")
GET		/getDeviceType/:deviceTypeName 			controllers.DeviceTypeController.getDeviceType(deviceTypeName: String, format: String="csv")
GET		/getAllDeviceTypes/json 			controllers.DeviceTypeController.getAllDeviceTypes(format: String="json")
GET		/getAllDeviceTypes/csv 			controllers.DeviceTypeController.getAllDeviceTypes(format: String="csv")
GET		/getAllDeviceTypes 			controllers.DeviceTypeController.getAllDeviceTypes(format: String="csv")
PUT		/updateDeviceType/:deviceTypeName 	controllers.DeviceTypeController.updateDeviceType(deviceTypeName: String, format: String="csv")
PUT		/updateDeviceType/:deviceTypeName/csv 	controllers.DeviceTypeController.updateDeviceType(deviceTypeName: String, format: String="csv")
PUT		/updateDeviceType/:deviceTypeName/json 	controllers.DeviceTypeController.updateDeviceType(deviceTypeName: String, format: String="json")
DELETE	/deleteDeviceType/:deviceTypeName 		controllers.DeviceTypeController.deleteDeviceType(deviceTypeName: String)

#DEVICE
GET     /getAllDevices          controllers.DeviceController.getAllDevices(format: String = "csv")
GET     /getAllDevices/csv      controllers.DeviceController.getAllDevices(format: String = "csv")
GET     /getAllDevices/json     controllers.DeviceController.getAllDevices(format: String = "json")
GET     /getDevice/:uri          controllers.DeviceController.getDevice(uri: String, format: String = "csv")
GET     /getDevice/:uri/csv      controllers.DeviceController.getDevice(uri: String, format: String = "csv")
GET     /getDevice/:uri/json     controllers.DeviceController.getDevice(uri: String,format: String = "json")
POST    /addDevice               controllers.DeviceController.add()
PUT 	/updateDevice/:deviceUri			controllers.DeviceController.updateDevice(deviceUri: String)
DELETE	/deleteDevice/:deviceName 		controllers.DeviceController.deleteDevice(deviceName: String)
GET     /getDevicesByGeofence/:location         controllers.DeviceController.getAllDevicesByGeofence(location: String, format: String = "csv")
GET     /getDevicesByGeofence/:location/csv      controllers.DeviceController.getAllDevicesByGeofence(location: String, format: String = "csv")
GET     /getDevicesByGeofence/:location/json     controllers.DeviceController.getAllDevicesByGeofence(location: String, format: String = "json")


# SensorType
POST	/addSensorType 							controllers.SensorTypeController.addSensorType()
POST	/updateSensorType 						controllers.SensorTypeController.updateSensorType()
GET     /getSensorType/:sensorTypeName			controllers.SensorTypeController.getSensorType(sensorTypeName: String, format: String = "csv")
GET     /getSensorType/:sensorTypeName/csv		controllers.SensorTypeController.getSensorType(sensorTypeName: String, format: String = "csv")
GET     /getSensorType/:sensorTypeName/json		controllers.SensorTypeController.getSensorType(sensorTypeName: String, format: String = "json")
GET     /getAllSensorTypes						controllers.SensorTypeController.getAllSensorTypes(format: String = "csv")
GET     /getAllSensorTypes/csv 					controllers.SensorTypeController.getAllSensorTypes(format: String = "csv")
GET     /getAllSensorTypes/json 				controllers.SensorTypeController.getAllSensorTypes(format: String = "json")
DELETE	/deleteSensorType/:sensorTypeName 		controllers.SensorTypeController.deleteSensorType(sensorTypeName: String)

# SensorReading
POST	/addSensorReading			  			controllers.SensorReadingController.add()

GET 	/getSensorReadingInRange/:sensorName/:startTime/:endTime	controllers.SensorReadingController.searchInTimeRange(sensorName: String, startTime: String, endTime: String, format: String = "csv")
GET 	/getSensorReadingInRange/:sensorName/:startTime/:endTime/csv	controllers.SensorReadingController.searchInTimeRange(sensorName: String, startTime: String, endTime: String, format: String = "csv")
GET 	/getSensorReadingInRange/:sensorName/:startTime/:endTime/json	controllers.SensorReadingController.searchInTimeRange(sensorName: String, startTime: String, endTime: String, format: String = "json")
GET     /getLatestReadingsFromAllDevices/:sensorType  controllers.SensorReadingController.latestReadingFromAllDevices(sensorType:String, format: String = "csv")
GET     /getLatestReadingsFromAllDevices/:sensorType/csv  controllers.SensorReadingController.latestReadingFromAllDevices(sensorType:String, format: String = "csv")
GET     /getLatestReadingsFromAllDevices/:sensorType/json controllers.SensorReadingController.latestReadingFromAllDevices(sensorType:String, format: String = "json")
GET		/getSensorReading/:sensorName/:timeStamp			controllers.SensorReadingController.searchAtTime(sensorName: String, timeStamp: Long, format: String = "csv")
GET     /getSensorReading/:sensorName/:timeStamp/csv      controllers.SensorReadingController.searchAtTime(sensorName: String, timeStamp: Long, format: String = "csv")
GET		/getSensorReading/:sensorName/:timeStamp/json		controllers.SensorReadingController.searchAtTime(sensorName: String, timeStamp: Long, format: String = "json")

GET		/getSensorReading/:deviceUri/:sensorTypeName/:timeStamp			controllers.SensorReadingController.searchAtTimeThruDeviceUriSensorTypeName(deviceUri: String, sensorTypeName: String, timeStamp: Long, format: String = "csv")
GET     /getSensorReading/:deviceUri/:sensorTypeName/:timeStamp/csv      controllers.SensorReadingController.searchAtTimeThruDeviceUriSensorTypeName(deviceUri: String, sensorTypeName: String, timeStamp: Long, format: String = "csv")
GET		/getSensorReading/:deviceUri/:sensorTypeName/:timeStamp/json		controllers.SensorReadingController.searchAtTimeThruDeviceUriSensorTypeName(deviceUri: String, sensorTypeName: String, timeStamp: Long, format: String = "json")

GET 	/getSensorReadingInRange/:deviceUri/:sensorTypeName/:startTime/:endTime	controllers.SensorReadingController.searchInTimeRangeThruDeviceUriSensorTypeName(deviceUri: String, sensorTypeName: String, startTime: String, endTime: String, format: String = "csv")
GET 	/getSensorReadingInRange/:deviceUri/:sensorTypeName/:startTime/:endTime/csv	controllers.SensorReadingController.searchInTimeRangeThruDeviceUriSensorTypeName(deviceUri: String, sensorTypeName: String, startTime: String, endTime: String, format: String = "csv")
GET 	/getSensorReadingInRange/:deviceUri/:sensorTypeName/:startTime/:endTime/json	controllers.SensorReadingController.searchInTimeRangeThruDeviceUriSensorTypeName(deviceUri: String, sensorTypeName: String, startTime: String, endTime: String, format: String = "json")

GET     /latestReadingFromDevicesByGeofence/:location  controllers.SensorReadingController.latestReadingFromDevicesByGeofence(location:String, format: String = "csv")
GET     /latestReadingFromDevicesByGeofence/:location/csv  controllers.SensorReadingController.latestReadingFromDevicesByGeofence(location:String, format: String = "csv")
GET     /latestReadingFromDevicesByGeofence/:location/json controllers.SensorReadingController.latestReadingFromDevicesByGeofence(location:String, format: String = "json")

GET		/getLastMinuteReadingsFromAllDevices/:timeStamp		controllers.SensorReadingController.lastReadingFromAllDevices(timeStamp: Long, format: String = "csv")
GET		/getLastMinuteReadingsFromAllDevices/:timeStamp/csv		controllers.SensorReadingController.lastReadingFromAllDevices(timeStamp: Long, format: String = "csv")
GET		/getLastMinuteReadingsFromAllDevices/:timeStamp/json		controllers.SensorReadingController.lastReadingFromAllDevices(timeStamp: Long, format: String = "json")

GET     /getLatestSensorReading/:sensorName                             controllers.SensorReadingController.getLatestSensorReading(sensorName:String, format:String="csv")
GET     /getLatestSensorReading/:sensorName/csv                         controllers.SensorReadingController.getLatestSensorReading(sensorName:String, format:String="csv")
GET     /getLatestSensorReading/:sensorName/json                        controllers.SensorReadingController.getLatestSensorReading(sensorName:String, format:String="json")
GET     /getLastMinuteSensorReadings/:sensorName                        controllers.SensorReadingController.getLastMinuteSensorReadings(sensorName:String, format:String="csv")
GET     /getLastMinuteSensorReadings/:sensorName/csv                    controllers.SensorReadingController.getLastMinuteSensorReadings(sensorName:String, format:String="csv")
GET     /getLastMinuteSensorReadings/:sensorName/json                   controllers.SensorReadingController.getLastMinuteSensorReadings(sensorName:String, format:String="json")

# Old SensorReading
#GET		/sensors/:deviceId/:timeStamp/:sensorType			controllers.SensorReadingController.searchAtTime(deviceId: String, timeStamp: String, sensorType: String, format: String = "csv")
#GET     /sensors/:deviceId/:timeStamp/:sensorType/csv       controllers.SensorReadingController.searchAtTime(deviceId: String, timeStamp: String, sensorType: String, format: String = "csv")
#GET		/sensors/:deviceId/:timeStamp/:sensorType/json	controllers.SensorReadingController.searchAtTime(deviceId: String, timeStamp: String, sensorType: String, format: String = "json")
#GET		/last_readings_from_all_devices/:timeStamp/:sensorType	controllers.SensorReadingController.lastReadingFromAllDevices(timeStamp: Long, sensorType:String, format: String = "csv")
#GET     /last_readings_from_all_devices/:timeStamp/:sensorType/csv  controllers.SensorReadingController.lastReadingFromAllDevices(timeStamp: Long, sensorType:String, format: String = "csv")
#GET		/last_readings_from_all_devices/:timeStamp/:sensorType/json	controllers.SensorReadingController.lastReadingFromAllDevices(timeStamp: Long, sensorType:String, format: String = "json")


# Sensor
POST	/addSensor					  		controllers.SensorController.addSensor()
POST	/updateSensor				  		controllers.SensorController.updateSensor()
GET 	/getSensor/:sensorName				controllers.SensorController.getSensor(sensorName: String, format: String="csv")
GET 	/getSensor/:sensorName/json			controllers.SensorController.getSensor(sensorName: String, format: String="json")
GET 	/getSensor/:sensorName/csv			controllers.SensorController.getSensor(sensorName: String, format: String="csv")
GET 	/getAllSensors						controllers.SensorController.getAllSensors(format: String="csv")
GET     /getAllSensorsReduced                                   controllers.SensorController.getAllSensorsReduced(format: String="csv")
GET     /getAllSensorsReduced/json                              controllers.SensorController.getAllSensorsReduced(format: String="json")
GET     /getAllSensorsReduced/csv                               controllers.SensorController.getAllSensorsReduced(format: String="csv")
GET 	/getAllSensors/json					controllers.SensorController.getAllSensors(format: String="json")
GET 	/getAllSensors/csv					controllers.SensorController.getAllSensors(format: String="csv")
DELETE  /deleteSensor/:sensorName     		controllers.SensorController.deleteSensor(sensorName: String)

# Sensor Category
POST	/addSensorCategory									controllers.SensorCategoryController.addSensorCategory()
POST	/updateSensorCategory								controllers.SensorCategoryController.updateSensorCategory()
GET		/getSensorCategory/:sensorCategoryName				controllers.SensorCategoryController.getSensorCategory(sensorCategoryName: String, format: String="csv")
GET		/getSensorCategory/:sensorCategoryName/json			controllers.SensorCategoryController.getSensorCategory(sensorCategoryName: String, format: String="json")
GET		/getSensorCategory/:sensorCategoryName/csv			controllers.SensorCategoryController.getSensorCategory(sensorCategoryName: String, format: String="csv")
GET		/getAllSensorCategories								controllers.SensorCategoryController.getAllSensorCategories(format: String="csv")
GET		/getAllSensorCategories/csv							controllers.SensorCategoryController.getAllSensorCategories(format: String="csv")
GET		/getAllSensorCategories/json						controllers.SensorCategoryController.getAllSensorCategories(format: String="json")
DELETE	/deleteSensorCategory/:sensorCategoryName	 		controllers.SensorCategoryController.deleteSensorCategory(sensorCategoryName: String)

# Climate Service
POST	/addClimateService									controllers.ClimateServiceController.addClimateService()
POST	/updateClimateService								controllers.ClimateServiceController.updateClimateService()
GET		/getClimateService/:climateServiceName				controllers.ClimateServiceController.getClimateService(climateServiceName: String, format: String="csv")
GET		/getClimateService/:climateServiceName/json			controllers.ClimateServiceController.getClimateService(climateServiceName: String, format: String="json")
GET		/getClimateService/:climateServiceName/csv			controllers.ClimateServiceController.getClimateService(climateServiceName: String, format: String="csv")
GET		/getAllClimateServices								controllers.ClimateServiceController.getAllClimateServices(format: String="csv")
GET		/getAllClimateServices/csv							controllers.ClimateServiceController.getAllClimateServices(format: String="csv")
GET		/getAllClimateServices/json						    controllers.ClimateServiceController.getAllClimateServices(format: String="json")
DELETE	/deleteClimateService/:climateServiceName	 		controllers.ClimateServiceController.deleteClimateService(climateServiceName: String)

# Climate Parameter
GET     /getAllServiceParameters                            controllers.ClimateServiceController.getAllServiceParameters(format: String="csv")
GET     /getAllServiceParameters/json                       controllers.ClimateServiceController.getAllServiceParameters(format: String="json")
GET     /getAllServiceParameters/csv                        controllers.ClimateServiceController.getAllServiceParameters(format: String="csv")
POST    /addServiceParameter                                controllers.ClimateServiceController.addServiceParameter()

# Climate Service ExecutionLog
POST    /addServiceExecutionLogUsingPost                     controllers.ClimateServiceController.addServiceExecutionLogUsingPost()
GET     /getAllServiceExecutionLogs/json                     controllers.ClimateServiceController.getAllServiceExecutionLogs(format: String="json")
GET     /getAllServiceExecutionLogs                          controllers.ClimateServiceController.getAllServiceExecutionLogs(format: String="csv")
GET     /getAllServiceExecutionLogs/csv                      controllers.ClimateServiceController.getAllServiceExecutionLogs(format: String="csv")
GET     /getServiceExecutionLogs/:userId/:startTime/:endTime/json controllers.ClimateServiceController.getServiceExecutionLogs(userId: String, startTime: String, endTime: String, format: String="json")
GET     /getServiceExecutionLogs/:userId/:startTime/:endTime/csv controllers.ClimateServiceController.getServiceExecutionLogs(userId: String, startTime: String, endTime: String, format: String="csv")
GET     /getServiceExecutionLogs/:userId/:startTime/:endTime controllers.ClimateServiceController.getServiceExecutionLogs(userId: String, startTime: String, endTime: String, format: String="csv")

# User
POST /addUser								controllers.UserController.addUser()
GET /getUser/:userName						controllers.UserController.getUser(userName: String, format: String = "csv")
GET /getUser/:userName/csv						controllers.UserController.getUser(userName: String, format: String = "csv")
GET /getUser/:userName/json						controllers.UserController.getUser(userName: String, format: String = "json")

# Contest User
POST /addContestUser								controllers.ContestUserController.addUser()
POST /updateContestUser								controllers.ContestUserController.updateUser()
DELETE /deleteContestUser/:userName/:password								controllers.ContestUserController.deleteUser(userName: String, password: String)
GET /getContestUser/:userName/:password						controllers.ContestUserController.getUser(userName: String, password: String, format: String = "csv")
GET /getContestUser/:userName/:password/csv						controllers.ContestUserController.getUser(userName: String, password: String, format: String = "csv")
GET /getContestUser/:userName/:password/json						controllers.ContestUserController.getUser(userName: String, password: String, format: String = "json")
GET /getAllContestUsers									controllers.ContestUserController.getAllUsers(format: String = "csv")
GET /getAllContestUsers/csv									controllers.ContestUserController.getAllUsers(format: String = "csv")
GET /getAllContestUsers/json									controllers.ContestUserController.getAllUsers(format: String = "json")

# WorkFlow
POST	/workflow/							controllers.WorkFlowRunnerController.changeInterval()
GET		/workflow/							controllers.WorkFlowRunnerController.index(format:String = "html")
GET		/workflow.json						controllers.WorkFlowRunnerController.index(format:String = "json")
